"""Initial

Revision ID: ade3b08c9f1f
Revises:
Create Date: 2021-08-01 06:05:31.412448

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ade3b08c9f1f"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "authuser",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.Column("is_verified", sa.Boolean(), nullable=True),
        sa.Column("last_login", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "date_joined",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("username", sa.String(length=150), nullable=False),
        sa.Column("from_lang", sa.String(length=20), nullable=False),
        sa.Column("to_lang", sa.String(length=20), nullable=False),
        sa.Column("dictionary_ordering", sa.String(length=50), nullable=False),
        sa.Column("config", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_authuser_email"), "authuser", ["email"], unique=True)
    op.create_index(op.f("ix_authuser_full_name"), "authuser", ["full_name"], unique=False)
    op.create_index(op.f("ix_authuser_id"), "authuser", ["id"], unique=False)
    op.create_index(op.f("ix_authuser_username"), "authuser", ["username"], unique=True)
    op.create_table(
        "bingapilookup",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.Column("from_lang", sa.String(length=20), nullable=False),
        sa.Column("to_lang", sa.String(length=20), nullable=False),
        sa.Column(
            "cached_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("source_text", "from_lang", "to_lang"),
    )
    op.create_index(
        op.f("ix_bingapilookup_cached_date"),
        "bingapilookup",
        ["cached_date"],
        unique=False,
    )
    op.create_index(op.f("ix_bingapilookup_from_lang"), "bingapilookup", ["from_lang"], unique=False)
    op.create_index(
        op.f("ix_bingapilookup_source_text"),
        "bingapilookup",
        ["source_text"],
        unique=False,
    )
    op.create_index(op.f("ix_bingapilookup_to_lang"), "bingapilookup", ["to_lang"], unique=False)
    op.create_table(
        "bingapitranslation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.Column("from_lang", sa.String(length=20), nullable=False),
        sa.Column("to_lang", sa.String(length=20), nullable=False),
        sa.Column(
            "cached_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("source_text", "from_lang", "to_lang"),
    )
    op.create_index(
        op.f("ix_bingapitranslation_cached_date"),
        "bingapitranslation",
        ["cached_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bingapitranslation_from_lang"),
        "bingapitranslation",
        ["from_lang"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bingapitranslation_source_text"),
        "bingapitranslation",
        ["source_text"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bingapitranslation_to_lang"),
        "bingapitranslation",
        ["to_lang"],
        unique=False,
    )
    op.create_table(
        "bingapitransliteration",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.Column("from_lang", sa.String(length=20), nullable=False),
        sa.Column("to_lang", sa.String(length=20), nullable=False),
        sa.Column(
            "cached_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("source_text", "from_lang", "to_lang"),
    )
    op.create_index(
        op.f("ix_bingapitransliteration_cached_date"),
        "bingapitransliteration",
        ["cached_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bingapitransliteration_from_lang"),
        "bingapitransliteration",
        ["from_lang"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bingapitransliteration_source_text"),
        "bingapitransliteration",
        ["source_text"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bingapitransliteration_to_lang"),
        "bingapitransliteration",
        ["to_lang"],
        unique=False,
    )
    op.create_table(
        "grammarrule",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=1000), nullable=False),
        sa.Column("rule", sa.String(length=1000), nullable=False),
        sa.Column("hsk_id", sa.String(length=1000), nullable=True),
        sa.Column("hsk_sub_id", sa.String(length=1000), nullable=True),
        sa.Column("topic_id", sa.Integer(), nullable=False),
        sa.Column("help_url", sa.String(length=1000), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("hsk_id", "hsk_sub_id"),
    )
    op.create_table(
        "zhhansenabclookup",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_zhhansenabclookup_source_text"),
        "zhhansenabclookup",
        ["source_text"],
        unique=False,
    )
    op.create_table(
        "zhhansenccclookup",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_zhhansenccclookup_source_text"),
        "zhhansenccclookup",
        ["source_text"],
        unique=False,
    )
    op.create_table(
        "zhhsklookup",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_zhhsklookup_source_text"), "zhhsklookup", ["source_text"], unique=False)
    op.create_table(
        "zhsubtlexlookup",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_zhsubtlexlookup_source_text"),
        "zhsubtlexlookup",
        ["source_text"],
        unique=False,
    )
    op.create_table(
        "cacheddefinition",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source_text", sa.String(length=2000), nullable=False),
        sa.Column("response_json", sa.String(length=25000), nullable=False),
        sa.Column("from_lang", sa.String(length=20), nullable=False),
        sa.Column("to_lang", sa.String(length=20), nullable=False),
        sa.Column(
            "cached_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("word_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["word_id"], ["bingapilookup.id"], initially="DEFERRED", deferrable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("source_text", "from_lang", "to_lang"),
    )
    op.create_index(
        "cach_cached__6fe42c_idx",
        "cacheddefinition",
        ["cached_date", "from_lang", "to_lang"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cacheddefinition_cached_date"),
        "cacheddefinition",
        ["cached_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cacheddefinition_from_lang"),
        "cacheddefinition",
        ["from_lang"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cacheddefinition_source_text"),
        "cacheddefinition",
        ["source_text"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cacheddefinition_to_lang"),
        "cacheddefinition",
        ["to_lang"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cacheddefinition_word_id"),
        "cacheddefinition",
        ["word_id"],
        unique=False,
    )
    op.create_table(
        "card",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("card_type", sa.Integer(), nullable=False),
        sa.Column("interval", sa.Integer(), nullable=False),
        sa.Column("repetition", sa.Integer(), nullable=False),
        sa.Column("efactor", sa.Float(precision=53), nullable=False),
        sa.Column("front", sa.Text(), nullable=True),
        sa.Column("back", sa.Text(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("word_id", sa.Integer(), nullable=False),
        sa.Column("due_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("known", sa.Boolean(), nullable=False),
        sa.Column("suspended", sa.Boolean(), nullable=False),
        sa.Column("first_revision_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_revision_date", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["authuser.id"], initially="DEFERRED", deferrable=True),
        sa.ForeignKeyConstraint(["word_id"], ["bingapilookup.id"], initially="DEFERRED", deferrable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "word_id", "card_type", name="uniq_user_card"),
    )
    op.create_index(op.f("ix_card_updated_at"), "card", ["updated_at"], unique=False)
    op.create_index(op.f("ix_card_user_id"), "card", ["user_id"], unique=False)
    op.create_index(op.f("ix_card_word_id"), "card", ["word_id"], unique=False)
    op.create_table(
        "import",
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column(
            "activate_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("deactivate_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("import_file", sa.String(length=100), nullable=False),
        sa.Column("processing", sa.Integer(), nullable=False),
        sa.Column("process_type", sa.Integer(), nullable=False),
        sa.Column("analysis", sa.Text(), nullable=True),
        sa.Column("shared", sa.Boolean(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["authuser.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["authuser.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_import_updated_at"), "import", ["updated_at"], unique=False)
    op.create_table(
        "survey",
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column(
            "activate_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("deactivate_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("survey_json", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_obligatory", sa.Boolean(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["authuser.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["authuser.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_survey_updated_at"), "survey", ["updated_at"], unique=False)
    op.create_table(
        "usergrammarrule",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("is_known", sa.Boolean(), nullable=True),
        sa.Column("grammar_rule_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("nb_checked", sa.Integer(), nullable=False),
        sa.Column("nb_seen", sa.Integer(), nullable=False),
        sa.Column("nb_studied", sa.Integer(), nullable=False),
        sa.Column("last_checked", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_seen", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_studied", sa.DateTime(timezone=True), nullable=True),
        sa.Column("nb_seen_since_last_check", sa.Integer(), nullable=False),
        sa.Column("nb_seen_since_last_study", sa.Integer(), nullable=False),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["grammar_rule_id"],
            ["grammarrule.id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["authuser.id"], initially="DEFERRED", deferrable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "grammar_rule_id"),
    )
    op.create_index(
        op.f("ix_usergrammarrule_grammar_rule_id"),
        "usergrammarrule",
        ["grammar_rule_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_usergrammarrule_updated_at"),
        "usergrammarrule",
        ["updated_at"],
        unique=False,
    )
    op.create_index(op.f("ix_usergrammarrule_user_id"), "usergrammarrule", ["user_id"], unique=False)
    op.create_table(
        "userword",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("nb_seen", sa.Integer(), nullable=False),
        sa.Column("last_seen", sa.DateTime(timezone=True), nullable=True),
        sa.Column("nb_checked", sa.Integer(), nullable=False),
        sa.Column("last_checked", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("word_id", sa.Integer(), nullable=False),
        sa.Column("nb_seen_since_last_check", sa.Integer(), nullable=False),
        sa.Column("is_known", sa.Boolean(), nullable=False),
        sa.Column("last_translated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("nb_translated", sa.Integer(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["authuser.id"], initially="DEFERRED", deferrable=True),
        sa.ForeignKeyConstraint(["word_id"], ["bingapilookup.id"], initially="DEFERRED", deferrable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "word_id"),
    )
    op.create_index(op.f("ix_userword_updated_at"), "userword", ["updated_at"], unique=False)
    op.create_index(op.f("ix_userword_user_id"), "userword", ["user_id"], unique=False)
    op.create_index(op.f("ix_userword_word_id"), "userword", ["word_id"], unique=False)
    op.create_table(
        "content",
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column(
            "activate_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("deactivate_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("content_type", sa.Integer(), nullable=False),
        sa.Column("author", sa.String(length=150), nullable=True),
        sa.Column("cover", sa.String(length=250), nullable=True),
        sa.Column("language", sa.String(length=30), nullable=True),
        sa.Column("the_import_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("processing", sa.Integer(), nullable=False),
        sa.Column("shared", sa.Boolean(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["authuser.id"],
        ),
        sa.ForeignKeyConstraint(["the_import_id"], ["import.id"], initially="DEFERRED", deferrable=True),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["authuser.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("the_import_id"),
    )
    op.create_index(op.f("ix_content_updated_at"), "content", ["updated_at"], unique=False)
    op.create_table(
        "userlist",
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column(
            "activate_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("deactivate_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("nb_to_take", sa.Integer(), nullable=False),
        sa.Column("only_dictionary_words", sa.Boolean(), nullable=False),
        sa.Column("minimum_abs_frequency", sa.Integer(), nullable=False),
        sa.Column("processing", sa.Integer(), nullable=False),
        sa.Column("the_import_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("shared", sa.Boolean(), nullable=False),
        sa.Column("minimum_doc_frequency", sa.Integer(), nullable=False),
        sa.Column("order_by", sa.Integer(), nullable=False),
        sa.Column("words_are_known", sa.Boolean(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["authuser.id"],
        ),
        sa.ForeignKeyConstraint(["the_import_id"], ["import.id"], initially="DEFERRED", deferrable=True),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["authuser.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_userlist_the_import_id"), "userlist", ["the_import_id"], unique=False)
    op.create_index(op.f("ix_userlist_updated_at"), "userlist", ["updated_at"], unique=False)
    op.create_table(
        "usersurvey",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("survey_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["authuser.id"],
        ),
        sa.ForeignKeyConstraint(["survey_id"], ["survey.id"], initially="DEFERRED", deferrable=True),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["authuser.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("created_by_id", "survey_id"),
    )
    op.create_index(op.f("ix_usersurvey_survey_id"), "usersurvey", ["survey_id"], unique=False)
    op.create_index(op.f("ix_usersurvey_updated_at"), "usersurvey", ["updated_at"], unique=False)
    op.create_table(
        "goal",
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column(
            "activate_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("deactivate_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("parent_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("user_list_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["authuser.id"],
        ),
        sa.ForeignKeyConstraint(["parent_id"], ["goal.id"], initially="DEFERRED", deferrable=True),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["authuser.id"],
        ),
        sa.ForeignKeyConstraint(["user_list_id"], ["userlist.id"], initially="DEFERRED", deferrable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_goal_parent_id"), "goal", ["parent_id"], unique=False)
    op.create_index(op.f("ix_goal_updated_at"), "goal", ["updated_at"], unique=False)
    op.create_index(op.f("ix_goal_user_list_id"), "goal", ["user_list_id"], unique=False)
    op.create_table(
        "userlistgrammarrule",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("grammar_rule_id", sa.Integer(), nullable=False),
        sa.Column("user_list_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["grammar_rule_id"],
            ["grammarrule.id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(["user_list_id"], ["userlist.id"], initially="DEFERRED", deferrable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_list_id", "grammar_rule_id"),
    )
    op.create_index(
        op.f("ix_userlistgrammarrule_grammar_rule_id"),
        "userlistgrammarrule",
        ["grammar_rule_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_userlistgrammarrule_user_list_id"),
        "userlistgrammarrule",
        ["user_list_id"],
        unique=False,
    )
    op.create_table(
        "userlistword",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_list_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("word_id", sa.Integer(), nullable=False),
        sa.Column("default_order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_list_id"], ["userlist.id"], initially="DEFERRED", deferrable=True),
        sa.ForeignKeyConstraint(["word_id"], ["bingapilookup.id"], initially="DEFERRED", deferrable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_list_id", "word_id"),
    )
    op.create_index(
        op.f("ix_userlistword_user_list_id"),
        "userlistword",
        ["user_list_id"],
        unique=False,
    )
    op.create_index(op.f("ix_userlistword_word_id"), "userlistword", ["word_id"], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_userlistword_word_id"), table_name="userlistword")
    op.drop_index(op.f("ix_userlistword_user_list_id"), table_name="userlistword")
    op.drop_table("userlistword")
    op.drop_index(op.f("ix_userlistgrammarrule_user_list_id"), table_name="userlistgrammarrule")
    op.drop_index(op.f("ix_userlistgrammarrule_grammar_rule_id"), table_name="userlistgrammarrule")
    op.drop_table("userlistgrammarrule")
    op.drop_index(op.f("ix_goal_user_list_id"), table_name="goal")
    op.drop_index(op.f("ix_goal_updated_at"), table_name="goal")
    op.drop_index(op.f("ix_goal_parent_id"), table_name="goal")
    op.drop_table("goal")
    op.drop_index(op.f("ix_usersurvey_updated_at"), table_name="usersurvey")
    op.drop_index(op.f("ix_usersurvey_survey_id"), table_name="usersurvey")
    op.drop_table("usersurvey")
    op.drop_index(op.f("ix_userlist_updated_at"), table_name="userlist")
    op.drop_index(op.f("ix_userlist_the_import_id"), table_name="userlist")
    op.drop_table("userlist")
    op.drop_index(op.f("ix_content_updated_at"), table_name="content")
    op.drop_table("content")
    op.drop_index(op.f("ix_userword_word_id"), table_name="userword")
    op.drop_index(op.f("ix_userword_user_id"), table_name="userword")
    op.drop_index(op.f("ix_userword_updated_at"), table_name="userword")
    op.drop_table("userword")
    op.drop_index(op.f("ix_usergrammarrule_user_id"), table_name="usergrammarrule")
    op.drop_index(op.f("ix_usergrammarrule_updated_at"), table_name="usergrammarrule")
    op.drop_index(op.f("ix_usergrammarrule_grammar_rule_id"), table_name="usergrammarrule")
    op.drop_table("usergrammarrule")
    op.drop_index(op.f("ix_survey_updated_at"), table_name="survey")
    op.drop_table("survey")
    op.drop_index(op.f("ix_import_updated_at"), table_name="import")
    op.drop_table("import")
    op.drop_index(op.f("ix_card_word_id"), table_name="card")
    op.drop_index(op.f("ix_card_user_id"), table_name="card")
    op.drop_index(op.f("ix_card_updated_at"), table_name="card")
    op.drop_table("card")
    op.drop_index(op.f("ix_cacheddefinition_word_id"), table_name="cacheddefinition")
    op.drop_index(op.f("ix_cacheddefinition_to_lang"), table_name="cacheddefinition")
    op.drop_index(op.f("ix_cacheddefinition_source_text"), table_name="cacheddefinition")
    op.drop_index(op.f("ix_cacheddefinition_from_lang"), table_name="cacheddefinition")
    op.drop_index(op.f("ix_cacheddefinition_cached_date"), table_name="cacheddefinition")
    op.drop_index("cach_cached__6fe42c_idx", table_name="cacheddefinition")
    op.drop_table("cacheddefinition")
    op.drop_index(op.f("ix_zhsubtlexlookup_source_text"), table_name="zhsubtlexlookup")
    op.drop_table("zhsubtlexlookup")
    op.drop_index(op.f("ix_zhhsklookup_source_text"), table_name="zhhsklookup")
    op.drop_table("zhhsklookup")
    op.drop_index(op.f("ix_zhhansenccclookup_source_text"), table_name="zhhansenccclookup")
    op.drop_table("zhhansenccclookup")
    op.drop_index(op.f("ix_zhhansenabclookup_source_text"), table_name="zhhansenabclookup")
    op.drop_table("zhhansenabclookup")
    op.drop_table("grammarrule")
    op.drop_index(op.f("ix_bingapitransliteration_to_lang"), table_name="bingapitransliteration")
    op.drop_index(
        op.f("ix_bingapitransliteration_source_text"),
        table_name="bingapitransliteration",
    )
    op.drop_index(op.f("ix_bingapitransliteration_from_lang"), table_name="bingapitransliteration")
    op.drop_index(
        op.f("ix_bingapitransliteration_cached_date"),
        table_name="bingapitransliteration",
    )
    op.drop_table("bingapitransliteration")
    op.drop_index(op.f("ix_bingapitranslation_to_lang"), table_name="bingapitranslation")
    op.drop_index(op.f("ix_bingapitranslation_source_text"), table_name="bingapitranslation")
    op.drop_index(op.f("ix_bingapitranslation_from_lang"), table_name="bingapitranslation")
    op.drop_index(op.f("ix_bingapitranslation_cached_date"), table_name="bingapitranslation")
    op.drop_table("bingapitranslation")
    op.drop_index(op.f("ix_bingapilookup_to_lang"), table_name="bingapilookup")
    op.drop_index(op.f("ix_bingapilookup_source_text"), table_name="bingapilookup")
    op.drop_index(op.f("ix_bingapilookup_from_lang"), table_name="bingapilookup")
    op.drop_index(op.f("ix_bingapilookup_cached_date"), table_name="bingapilookup")
    op.drop_table("bingapilookup")
    op.drop_index(op.f("ix_authuser_username"), table_name="authuser")
    op.drop_index(op.f("ix_authuser_id"), table_name="authuser")
    op.drop_index(op.f("ix_authuser_full_name"), table_name="authuser")
    op.drop_index(op.f("ix_authuser_email"), table_name="authuser")
    op.drop_table("authuser")
    # ### end Alembic commands ###
